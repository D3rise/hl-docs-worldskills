# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

# Глоссарий:
# 1. Membership Service Provider - набор (папка) из сертификатов,
#     которые позволяют установить связь между сертификатом пользователя
#     и организацией, к которой он принадлежит. В папке MSP находятся следующий подпапки:
#     1. admincerts - сертификаты администраторов
#     2. cacerts - сертификаты центров сертификации
#
# 2. Центр сертификации (CA - Certificate Authority) - сервер, который отвечает за учёт пользователей,
#     выпуск их сертификатов с использованием корневого сертификата центра сертификации. Он хранит всю
#     информацию о зарегистрированных в организации пользователях.
#
# 3. MSPID - уникальный идентификатор Membership Service Provider, позволяет идентифицировать пользователей
#     внутри сети, с помощью него определяется к какой организации принадлежит пользователь. Так, например,
#     в сертификате каждого пользователя хранится информация о его MSP ID, которую потом (например, при вызове
#     функции смарт-контракта) на своей стороне проверяет нода организации и с помощью информации заложенной
#     в этом файле (configtx.yaml) сопоставляет MSPID пользователя с его организацией.
#
# 4. Peer - основная единица в сети HyperLedger Fabric, которая представляет собой сервер, отвечающий
#     за общение между организациями, синхронизацию блоков, проверку подписей и прочее. Именно он
#     формирует транзакции и передаёт их в Orderer пир (см. пункт 6).
#
# 5. Anchor Peer - пиры (Peer), которые доступны всем организациям в сети для подключения.
#     Для работы блокчейна, все пиры должны иметь возможность общаться между собой, а значит, они должны
#     знать путь друг к другу внутри сети. Внутри конфигурации мы указываем Anchor пиры явно, чтобы
#     все организации имели возможность подключится друг другу, например, для отправки запроса на
#     подтверждение транзакции (Endorsement)
#
# 6. Orderer Peer - пир, который отвечает за формирование порядка блоков внутри канала.
#     Он не принимает и не обрабатывает транзакции, а следит за сохранением их порядка и отправкой
#     их внутрь канала, откуда они поступают всем остальным участникам сети (канала).
#
# 7. Channel (канал) - основной, главный элемент сети HyperLedger Fabric, который хранит в себе
#     цепочку блоков. Право на подключение к каналу имеют только те организации, которые были
#     прописаны внутри профиля канала (см. конец файла).
#     Пиры организаций получают из всю информацию о блоках, а также синхронизируются
#     именно через канал.

---
Organizations:
  # Orderer будет выступать организацией, которая формирует порядок блоков
  - &OrdererOrg
    Name: OrdererOrg

    ID: OrdererMSP

    # 1. Меняем путь к файлам сертификатов организации (Membership Service Provider - MSP)
    # Все файлы, касающиеся организаций, у нас будут хранится внутри папки orgs,
    # поэтому в качестве папки указываем ./orgs/orderer/msp
    MSPDir: ./orgs/0/msp

    # Политики, которые будут использоваться для этой организации
    # Политики задают необходимые права для выполнения определенных операций,
    # доступных для организации:
    # Readers - чтение блокчейна
    # Writers - запись в блокчейн
    # Admins - администрирование блокчейна
    Policies:
      Readers:
        Type: Signature
        Rule: "OR('OrdererMSP.member')"
      Writers:
        Type: Signature
        Rule: "OR('OrdererMSP.member')"
      Admins:
        Type: Signature
        Rule: "OR('OrdererMSP.admin')"

    # 2. Меняем сетевые пути к ordering-нодам
    # OrdererEndpoints - сетевые пути к ordering-нодам организации,
    # и поскольку наши ноды будут работать в локальной сети, мы
    # должны заменить все адреса указанные в этом файле на соответствующие
    # локальные адреса.
    #
    # Ordering-нода будет работать на нашем первом компьютере (например,
    # 192.168.21.154), поэтому мы меняем orderer.example.com:7050 на 192.168.21.154:7050
    OrdererEndpoints:
      - 192.168.21.154:7050

  - &Org1
    # Название организации - не используется в сети, используется только для
    # идентификации организации в файле configtx.yaml
    Name: Users

    # 3. Меняем название организаций с Org1MSP на UsersMSP
    # MSPID - идентификатор организации, используется внутри сети для идентификации
    # (см. Глоссарий)
    ID: UsersMSP

    # 4. Меняем путь к файлам сертификатов организации (Membership Service Provider - MSP)
    MSPDir: ./orgs/1/msp

    # 5. Меняем политики организации
    # Политики, которые будут использоваться для этой организации
    # Поскольку мы делаем тестовую сеть, для упрощения наших задач мы предоставим
    # Права на запись, чтение и подтверждение транзакций (Endorsement) всем участникам организации.
    # Для этого везде (кроме Admins) заменяем Rule на "OR('UsersMSP.member')" (поскольку мы изменили
    # MSPID организации, мы также должны поменять его и в Rule)
    Policies:
      Readers:
        Type: Signature
        Rule: "OR('UsersMSP.member')"
      Writers:
        Type: Signature
        Rule: "OR('UsersMSP.member')"
      Admins:
        Type: Signature
        Rule: "OR('UsersMSP.admin')"
      Endorsement:
        Type: Signature
        Rule: "OR('UsersMSP.member')"

    # 6. Создаем раздел AnchorPeers (см. Глоссарий)
    # Поскольку ноды организации Users у нас будут работать на первом компьютере,
    # в качестве хоста указываем IP адрес первого компьютера в локальной сети
    AnchorPeers:
      - Host: 192.168.21.154
        Port: 9051

  # Приступаем к конфигурированию второй организации
  - &Org2 # Меняем название организации внутри конфигурации
    Name: Shops

    # 7. Меняем название организации в сети с Org2MSP на ShopsMSP
    ID: ShopsMSP

    # 8. Меняем путь к MSP файлам организации
    MSPDir: ./orgs/2/msp

    # 9. Меняем политики организации
    # Точно так же позволяем всем участникам организации читать,
    # записывать и подтверждать транзакции (Endorsement)
    Policies:
      Readers:
        Type: Signature
        Rule: "OR('ShopsMSP.member')"
      Writers:
        Type: Signature
        Rule: "OR('ShopsMSP.member')"
      Admins:
        Type: Signature
        Rule: "OR('ShopsMSP.admin')"
      Endorsement:
        Type: Signature
        Rule: "OR('ShopsMSP.member')"

    # 10. Создаем раздел AnchorPeers (см. Глоссарий)
    # Поскольку ноды организации Shops у нас будут работать на втором компьютере,
    # в качестве хоста указываем IP адрес второго компьютера в локальной сети (например, 192.168.21.156)
    AnchorPeers:
      - Host: 192.168.21.156
        Port: 9052

  # Приступаем к конфигурированию третьей организации
  # Копируем Org2
  - &Org3 # Меняем название организации внутри конфигурации
    Name: Bank

    # 11. Меняем название организации в сети с Org2MSP на ShopsMSP
    ID: BankMSP

    # 12. Меняем путь к MSP файлам организации
    MSPDir: ./orgs/3/msp

    # 13. Меняем политики организации
    # Точно так же позволяем всем участникам организации читать,
    # записывать и подтверждать транзакции (Endorsement)
    Policies:
      Readers:
        Type: Signature
        Rule: "OR('BankMSP.member')"
      Writers:
        Type: Signature
        Rule: "OR('BankMSP.member')"
      Admins:
        Type: Signature
        Rule: "OR('BankMSP.admin')"
      Endorsement:
        Type: Signature
        Rule: "OR('BankMSP.member')"

    # 14. Создаем раздел AnchorPeers (см. Глоссарий)
    # Поскольку ноды организации Shops у нас будут работать на втором компьютере,
    # в качестве хоста указываем IP адрес второго компьютера в локальной сети (например, 192.168.21.156)
    AnchorPeers:
      - Host: 192.168.21.156
        Port: 9053

# Capabilities указывает возможности каждой части сети
# Конфигурация сети разделяется на три части:
#   1. Channel - конфигурация канала (часть сети, хранящая в себе цепочку блоков)
#   2. Orderer - конфигурация ордерера (часть сети, отвечающая за формирование блоков в каналах)
#   3. Application - конфигурация пользовательской части сети (в ней происходит деплой контрактов,
#                    создание и подтверждение транзакций и т.д.)
#
# Оставляем всё как есть, все три части сети работают на версии 2.0
# (см. https://hyperledger-fabric.readthedocs.io/en/release-2.2/whatsnew.html)
Capabilities:
  Channel: &ChannelCapabilities
    V2_0: true

  Orderer: &OrdererCapabilities
    V2_0: true

  Application: &ApplicationCapabilities
    V2_0: true

# Конфигурация пользовательской части сети
Application: &ApplicationDefaults
  # Organizations оставим пустым, потому что все организации мы будем
  # указывать внутри профилей (см. конец файла)
  Organizations:

  # Политики пользовательской части сети
  # ImplicitMeta, в отличии Signature, абстрагирует нас от политик внутри
  # каждой организации и говорит лишь о том, кто именно из владеющих определенными
  # правами должен произвести действие для его исполнения в сети.
  #
  # ANY - любой из владеющих правами;
  # MAJORITY - все из владеющих правами;
  #
  # Для работы нашей сети менять ничего не требуется.
  Policies:
    Readers:
      Type: ImplicitMeta
      Rule: "ANY Readers"
    Writers:
      Type: ImplicitMeta
      Rule: "ANY Writers"
    Admins:
      Type: ImplicitMeta
      Rule: "MAJORITY Admins"
    LifecycleEndorsement:
      Type: ImplicitMeta
      Rule: "MAJORITY Endorsement"
    Endorsement:
      Type: ImplicitMeta
      Rule: "MAJORITY Endorsement"

  Capabilities:
    <<: *ApplicationCapabilities

# Конфигурация ордерера, который отвечает за формирование порядка блоков
# (см. Глоссарий)
Orderer: &OrdererDefaults
  OrdererType: solo
  BatchTimeout: 2s

  BatchSize:
    MaxMessageCount: 10

    AbsoluteMaxBytes: 99 MB

    PreferredMaxBytes: 512 KB

  Organizations:

  Policies:
    Readers:
      Type: ImplicitMeta
      Rule: "ANY Readers"
    Writers:
      Type: ImplicitMeta
      Rule: "ANY Writers"
    Admins:
      Type: ImplicitMeta
      Rule: "MAJORITY Admins"
    BlockValidation:
      Type: ImplicitMeta
      Rule: "ANY Writers"

Channel: &ChannelDefaults
  Policies:
    Readers:
      Type: ImplicitMeta
      Rule: "ANY Readers"
    Writers:
      Type: ImplicitMeta
      Rule: "ANY Writers"
    Admins:
      Type: ImplicitMeta
      Rule: "MAJORITY Admins"

  Capabilities:
    <<: *ChannelCapabilities

Profiles:
  TwoOrgsApplicationGenesis:
    <<: *ChannelDefaults
    Consortiums:
      Cons:
        Organizations:
          - *Org1
          - *Org2
    Orderer:
      <<: *OrdererDefaults
      Organizations:
        - *OrdererOrg
      Capabilities: *OrdererCapabilities
  Channel:
    Application:
      <<: *ApplicationDefaults
      Organizations:
        - *Org1
        - *Org2
      Capabilities: *ApplicationCapabilities
